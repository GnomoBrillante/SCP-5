import os
import pandas as pd
import matplotlib as plt
import numpy as np
from matplotlib.ticker import MaxNLocator
"""
Funciones que piden los datos
"""

def escoger_region():#opcion para escoger Region
    while(1):
        print("Escoja una de las 16 Regiones  [1...16]\n")
        opcion=int(input("seleccione una opcion "))
        os.system ("cls")
        if((opcion>=1)and (opcion<=16)):
            break
        print("incerte un valor valido \n")
    return opcion

def escoger_comuna():
    while(1):
        print("Incerte el nombre de la comuna \n")
        opcion=input("Comuna: ")
        os.system ("cls")
        if(not opcion.isdigit()):# no es digito
            break
        print("incerte un valor valido \n")
    return opcion
    

def sub_menu():#opcion para historico o todo los datos
    while(1):
        print("( 1 ) ultimos 7 dias \n( 2 ) historico\n")
        opcion=int(input("seleccione una opcion:  "))
        os.system ("cls")
        if((opcion>=1)and (opcion<=2)):
            break
        print("incerte un valor valido \n")
    return opcion

def menu():#funcion que muestra el menu de todas las opciones
    opcion_tiempo=0
    while(1):
        print("\n")
        print("( 1 ) Tasa de incidencia Comuna ")
        print("( 2 ) Tasa de incidencia Region  ")
        print("( 3 ) Top Region max vs min")
        print("( 4 ) Top Compuna max vs min")
        print("( 0 ) salir")
        opcion=int(input("seleccione una opcion: "))
        os.system ("cls")
        
        
        if((opcion>=1)and (opcion<=2)):
            opcion_tiempo=sub_menu()#opcion para las opciones donde se puede pedir mas de un tipo de info
        if((opcion>=0)and (opcion<=4)):
            break
        print("incerte un valor valido \n")    
            
            
            
    return opcion,opcion_tiempo
"""
Funciones que manipulan los data Frame
"""
def extraer_datos():# se extraen los datos
    df=pd.read_csv("TasaDeIncidencia.csv",index_col="Region")
    return df

def mostrar_regionANDcomuna(df,numRegion):
    print("\n")
    print("REGION: ",numRegion)
    print(df[(df["Codigo region"]==numRegion)]["Comuna"])
    print("\n")
    

def TDI_comuna(opcion2):
    df=extraer_datos()#extraemos datos
    numRegion=escoger_region()#escogemos region
    mostrar_regionANDcomuna(df, numRegion)#mostramos la region y comuna
    comuna=escoger_comuna()# escogemos la comuna
    df2=df[(df["Comuna"]==comuna)]#obtenemos la comuna en especifico
    
    if(opcion2==1):#informacion ultimos 7 dias
        df2=df2.iloc[:,127:134]
        df2=df2.iloc[0,:]#obtenemos solo la informacion de la insidencia de los casos
        
        a=df2.plot(kind="bar",xlabel="Comuna:"+comuna,ylabel="Casos")
        a.set_title("Casos ultimos 7 dias")
        plt.rc('xtick', labelsize=10) 
        plt.pyplot.show()
        
    if(opcion2==2):#informacion  historico
        df2=df2.iloc[:,4:134]
        df2=df2.iloc[0,:]#obtenemos solo la informacion de la insidencia de los casos
        
        a=df2.plot(kind="bar",xlabel="Comuna:"+comuna,ylabel="Casos")
        a.set_title("Casos historicos")
        plt.rc('xtick', labelsize=10) 
        a.xaxis.set_major_locator(MaxNLocator(5))
        plt.pyplot.show()
    pass

def TDI_region(opcion2):
    df=extraer_datos()#extraemos datos
    numRegion=escoger_region()#escogemos region
    mostrar_regionANDcomuna(df, numRegion)#mostramos la region y comuna
    df2=df.groupby("Codigo region").sum()#agrupamos en regioness
    df2=df2.iloc[:,2:134]
    numRegion=numRegion-1
    df2=df2.iloc[numRegion,:]
    
    if(opcion2==1):#informacion ultimos 7 dias
        
        df2=df2.iloc[123:130]     
        a=df2.plot(kind="bar",xlabel="Region:"+str(numRegion+1),ylabel="Casos")
        a.set_title("Casos ultimos 7 dias")
        plt.rc('xtick', labelsize=10)
        plt.pyplot.show()
        
    if(opcion2==2):#informacion  historico
        
        a=df2.plot(kind="bar",xlabel="Region:"+str(numRegion+1),ylabel="Casos")
        a.set_title("Casos historicos")
        plt.rc('xtick', labelsize=10) 
        a.xaxis.set_major_locator(MaxNLocator(5))
        plt.pyplot.show()
        
def max_min_region():
    df=extraer_datos()#extraemos datos
    df2=df.groupby("Codigo region").sum()
    #print(df2)
    df2=df2.iloc[:,2:132]
    
    df2['sum'] = df2.iloc[:,2:132].sum(axis=1)
    #print(df2)
    
    max=df2['sum'].max()
    min=df2['sum'].min()
    
    dat1=df2[df2["sum"]>=max]
    dat1=dat1.iloc[0,0:130]
    
    
    dat2=df2[df2["sum"]<=min]
    dat2=dat2.iloc[0,0:130]
    
    fig, (ax1, ax2) = plt.pyplot.subplots(2)
    fig.suptitle('Region con maxina incidencia y Region con minima incidencia')
    ax1.plot(dat1.index.values, dat1.to_numpy())
    ax1.xaxis.set_major_locator(MaxNLocator(5))
    
    ax2.plot(dat2.index.values,dat2.to_numpy())
    ax2.xaxis.set_major_locator(MaxNLocator(5))
    plt.pyplot.show()
    
    
    

def max_min_comuna():
    df=extraer_datos()#extraemos datos
    
    df15=df.iloc[:,4:134]
    df16=df["Comuna"]
    df2=pd.concat([df16,df15], axis=1)
    df2['sum'] = df2.iloc[:,1:131].sum(axis=1)
    
    max=df2['sum'].max()
    min=df2['sum'].min()
    
    dat1=df2[df2["sum"]>=max]
    dat1=dat1.iloc[0,2:131]
    print(dat1)
    

    
    dat2=df2[df2["sum"]<=min]
    dat2=dat2.iloc[0,2:131]
    
    fig, (ax1, ax2) = plt.pyplot.subplots(2)
    fig.suptitle('Comuna con maxina incidencia y Comuna con minima incidencia')
    ax1.plot(dat1.index.values, dat1.to_numpy())
    ax1.xaxis.set_major_locator(MaxNLocator(5))
    
    ax2.plot(dat2.index.values,dat2.to_numpy())
    ax2.xaxis.set_major_locator(MaxNLocator(5))
    plt.pyplot.show()

    pass

while(1):
    opcion2=0
    #---------------cuerpo del main -----------------------
    opcion1,opcion2=menu()
    
    if(opcion1==1):
        TDI_comuna(opcion2)
    if(opcion1==2):
        TDI_region(opcion2)
        
    if(opcion1==3):
        max_min_region()
        
    if(opcion1==4):
        max_min_comuna()
    
    #--------------------------------------
    if(opcion1==0):
        print("saliendo....")
        break
